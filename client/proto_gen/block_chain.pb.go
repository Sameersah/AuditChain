// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: block_chain.proto

package common

import (
	common "github.com/sameersah/auditchain/proto_gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WhisperResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // "success", "failure"
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhisperResponse) Reset() {
	*x = WhisperResponse{}
	mi := &file_block_chain_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhisperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhisperResponse) ProtoMessage() {}

func (x *WhisperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_block_chain_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhisperResponse.ProtoReflect.Descriptor instead.
func (*WhisperResponse) Descriptor() ([]byte, []int) {
	return file_block_chain_proto_rawDescGZIP(), []int{0}
}

func (x *WhisperResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WhisperResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Block struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BlockHash         string                 `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	PreviousBlockHash string                 `protobuf:"bytes,2,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	MerkleRoot        string                 `protobuf:"bytes,3,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	BlockNumber       int32                  `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Timestamp         int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ProposerId        string                 `protobuf:"bytes,6,opt,name=proposer_id,json=proposerId,proto3" json:"proposer_id,omitempty"`
	Audits            []*common.FileAudit    `protobuf:"bytes,7,rep,name=audits,proto3" json:"audits,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_block_chain_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_block_chain_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_block_chain_proto_rawDescGZIP(), []int{1}
}

func (x *Block) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Block) GetPreviousBlockHash() string {
	if x != nil {
		return x.PreviousBlockHash
	}
	return ""
}

func (x *Block) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *Block) GetBlockNumber() int32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Block) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Block) GetProposerId() string {
	if x != nil {
		return x.ProposerId
	}
	return ""
}

func (x *Block) GetAudits() []*common.FileAudit {
	if x != nil {
		return x.Audits
	}
	return nil
}

type BlockProposal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Block         *Block                 `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	ProposerId    string                 `protobuf:"bytes,2,opt,name=proposer_id,json=proposerId,proto3" json:"proposer_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockProposal) Reset() {
	*x = BlockProposal{}
	mi := &file_block_chain_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockProposal) ProtoMessage() {}

func (x *BlockProposal) ProtoReflect() protoreflect.Message {
	mi := &file_block_chain_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockProposal.ProtoReflect.Descriptor instead.
func (*BlockProposal) Descriptor() ([]byte, []int) {
	return file_block_chain_proto_rawDescGZIP(), []int{2}
}

func (x *BlockProposal) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BlockProposal) GetProposerId() string {
	if x != nil {
		return x.ProposerId
	}
	return ""
}

func (x *BlockProposal) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Vote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockId       string                 `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	ValidatorId   string                 `protobuf:"bytes,2,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`
	Approve       bool                   `protobuf:"varint,3,opt,name=approve,proto3" json:"approve,omitempty"`
	Signature     string                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_block_chain_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_block_chain_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_block_chain_proto_rawDescGZIP(), []int{3}
}

func (x *Vote) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *Vote) GetValidatorId() string {
	if x != nil {
		return x.ValidatorId
	}
	return ""
}

func (x *Vote) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

func (x *Vote) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Vote) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type BlockVoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockVoteResponse) Reset() {
	*x = BlockVoteResponse{}
	mi := &file_block_chain_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockVoteResponse) ProtoMessage() {}

func (x *BlockVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_block_chain_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockVoteResponse.ProtoReflect.Descriptor instead.
func (*BlockVoteResponse) Descriptor() ([]byte, []int) {
	return file_block_chain_proto_rawDescGZIP(), []int{4}
}

func (x *BlockVoteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BlockVoteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_block_chain_proto protoreflect.FileDescriptor

const file_block_chain_proto_rawDesc = "" +
	"\n" +
	"\x11block_chain.proto\x12\n" +
	"blockchain\x1a\fcommon.proto\"?\n" +
	"\x0fWhisperResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\x84\x02\n" +
	"\x05Block\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x01 \x01(\tR\tblockHash\x12.\n" +
	"\x13previous_block_hash\x18\x02 \x01(\tR\x11previousBlockHash\x12\x1f\n" +
	"\vmerkle_root\x18\x03 \x01(\tR\n" +
	"merkleRoot\x12!\n" +
	"\fblock_number\x18\x04 \x01(\x05R\vblockNumber\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\x12\x1f\n" +
	"\vproposer_id\x18\x06 \x01(\tR\n" +
	"proposerId\x12)\n" +
	"\x06audits\x18\a \x03(\v2\x11.common.FileAuditR\x06audits\"w\n" +
	"\rBlockProposal\x12'\n" +
	"\x05block\x18\x01 \x01(\v2\x11.blockchain.BlockR\x05block\x12\x1f\n" +
	"\vproposer_id\x18\x02 \x01(\tR\n" +
	"proposerId\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"\x9a\x01\n" +
	"\x04Vote\x12\x19\n" +
	"\bblock_id\x18\x01 \x01(\tR\ablockId\x12!\n" +
	"\fvalidator_id\x18\x02 \x01(\tR\vvalidatorId\x12\x18\n" +
	"\aapprove\x18\x03 \x01(\bR\aapprove\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\tR\tsignature\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\"G\n" +
	"\x11BlockVoteResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage2\xe4\x01\n" +
	"\x11BlockChainService\x12E\n" +
	"\x13WhisperAuditRequest\x12\x11.common.FileAudit\x1a\x1b.blockchain.WhisperResponse\x12H\n" +
	"\fProposeBlock\x12\x19.blockchain.BlockProposal\x1a\x1d.blockchain.BlockVoteResponse\x12>\n" +
	"\vVoteOnBlock\x12\x10.blockchain.Vote\x1a\x1d.blockchain.BlockVoteResponseB4Z2github.com/sameersah/auditchain/block_chain/commonb\x06proto3"

var (
	file_block_chain_proto_rawDescOnce sync.Once
	file_block_chain_proto_rawDescData []byte
)

func file_block_chain_proto_rawDescGZIP() []byte {
	file_block_chain_proto_rawDescOnce.Do(func() {
		file_block_chain_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_block_chain_proto_rawDesc), len(file_block_chain_proto_rawDesc)))
	})
	return file_block_chain_proto_rawDescData
}

var file_block_chain_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_block_chain_proto_goTypes = []any{
	(*WhisperResponse)(nil),   // 0: blockchain.WhisperResponse
	(*Block)(nil),             // 1: blockchain.Block
	(*BlockProposal)(nil),     // 2: blockchain.BlockProposal
	(*Vote)(nil),              // 3: blockchain.Vote
	(*BlockVoteResponse)(nil), // 4: blockchain.BlockVoteResponse
	(*common.FileAudit)(nil),  // 5: common.FileAudit
}
var file_block_chain_proto_depIdxs = []int32{
	5, // 0: blockchain.Block.audits:type_name -> common.FileAudit
	1, // 1: blockchain.BlockProposal.block:type_name -> blockchain.Block
	5, // 2: blockchain.BlockChainService.WhisperAuditRequest:input_type -> common.FileAudit
	2, // 3: blockchain.BlockChainService.ProposeBlock:input_type -> blockchain.BlockProposal
	3, // 4: blockchain.BlockChainService.VoteOnBlock:input_type -> blockchain.Vote
	0, // 5: blockchain.BlockChainService.WhisperAuditRequest:output_type -> blockchain.WhisperResponse
	4, // 6: blockchain.BlockChainService.ProposeBlock:output_type -> blockchain.BlockVoteResponse
	4, // 7: blockchain.BlockChainService.VoteOnBlock:output_type -> blockchain.BlockVoteResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_block_chain_proto_init() }
func file_block_chain_proto_init() {
	if File_block_chain_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_block_chain_proto_rawDesc), len(file_block_chain_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_block_chain_proto_goTypes,
		DependencyIndexes: file_block_chain_proto_depIdxs,
		MessageInfos:      file_block_chain_proto_msgTypes,
	}.Build()
	File_block_chain_proto = out.File
	file_block_chain_proto_goTypes = nil
	file_block_chain_proto_depIdxs = nil
}
