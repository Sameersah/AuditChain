// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: block_chain.proto

package common

import (
	context "context"
	common "github.com/sameersah/auditchain/proto_gen/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlockChainService_WhisperAuditRequest_FullMethodName = "/blockchain.BlockChainService/WhisperAuditRequest"
	BlockChainService_ProposeBlock_FullMethodName        = "/blockchain.BlockChainService/ProposeBlock"
	BlockChainService_VoteOnBlock_FullMethodName         = "/blockchain.BlockChainService/VoteOnBlock"
)

// BlockChainServiceClient is the client API for BlockChainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockChainServiceClient interface {
	WhisperAuditRequest(ctx context.Context, in *common.FileAudit, opts ...grpc.CallOption) (*WhisperResponse, error)
	ProposeBlock(ctx context.Context, in *BlockProposal, opts ...grpc.CallOption) (*BlockVoteResponse, error)
	VoteOnBlock(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*BlockVoteResponse, error)
}

type blockChainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockChainServiceClient(cc grpc.ClientConnInterface) BlockChainServiceClient {
	return &blockChainServiceClient{cc}
}

func (c *blockChainServiceClient) WhisperAuditRequest(ctx context.Context, in *common.FileAudit, opts ...grpc.CallOption) (*WhisperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhisperResponse)
	err := c.cc.Invoke(ctx, BlockChainService_WhisperAuditRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) ProposeBlock(ctx context.Context, in *BlockProposal, opts ...grpc.CallOption) (*BlockVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockVoteResponse)
	err := c.cc.Invoke(ctx, BlockChainService_ProposeBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) VoteOnBlock(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*BlockVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockVoteResponse)
	err := c.cc.Invoke(ctx, BlockChainService_VoteOnBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockChainServiceServer is the server API for BlockChainService service.
// All implementations must embed UnimplementedBlockChainServiceServer
// for forward compatibility.
type BlockChainServiceServer interface {
	WhisperAuditRequest(context.Context, *common.FileAudit) (*WhisperResponse, error)
	ProposeBlock(context.Context, *BlockProposal) (*BlockVoteResponse, error)
	VoteOnBlock(context.Context, *Vote) (*BlockVoteResponse, error)
	mustEmbedUnimplementedBlockChainServiceServer()
}

// UnimplementedBlockChainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockChainServiceServer struct{}

func (UnimplementedBlockChainServiceServer) WhisperAuditRequest(context.Context, *common.FileAudit) (*WhisperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhisperAuditRequest not implemented")
}
func (UnimplementedBlockChainServiceServer) ProposeBlock(context.Context, *BlockProposal) (*BlockVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeBlock not implemented")
}
func (UnimplementedBlockChainServiceServer) VoteOnBlock(context.Context, *Vote) (*BlockVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOnBlock not implemented")
}
func (UnimplementedBlockChainServiceServer) mustEmbedUnimplementedBlockChainServiceServer() {}
func (UnimplementedBlockChainServiceServer) testEmbeddedByValue()                           {}

// UnsafeBlockChainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockChainServiceServer will
// result in compilation errors.
type UnsafeBlockChainServiceServer interface {
	mustEmbedUnimplementedBlockChainServiceServer()
}

func RegisterBlockChainServiceServer(s grpc.ServiceRegistrar, srv BlockChainServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlockChainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockChainService_ServiceDesc, srv)
}

func _BlockChainService_WhisperAuditRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FileAudit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).WhisperAuditRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockChainService_WhisperAuditRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).WhisperAuditRequest(ctx, req.(*common.FileAudit))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_ProposeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).ProposeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockChainService_ProposeBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).ProposeBlock(ctx, req.(*BlockProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_VoteOnBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).VoteOnBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockChainService_VoteOnBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).VoteOnBlock(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockChainService_ServiceDesc is the grpc.ServiceDesc for BlockChainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockChainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.BlockChainService",
	HandlerType: (*BlockChainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhisperAuditRequest",
			Handler:    _BlockChainService_WhisperAuditRequest_Handler,
		},
		{
			MethodName: "ProposeBlock",
			Handler:    _BlockChainService_ProposeBlock_Handler,
		},
		{
			MethodName: "VoteOnBlock",
			Handler:    _BlockChainService_VoteOnBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block_chain.proto",
}
